(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'check flak'"
p3
sS'layer'
p4
S'/home/kira/web2py/applications/projectlibrary/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    form = db().select(db.project.ALL, orderby=~db.project.num_downloads)\n    \n    form1 = db().select(db.project.ALL, orderby=~db.project.date_added)\n    return dict(form=form,form1=form1)\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    session.flash = T("Welcome to Project Library")\n    return dict(message=T(\'Search - Download - Upload\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef clearnoti():\n\tform=db(db.flak.user_id==auth.user.id).select()\n\tfor some in form:\n\t\tsome.all_flag=False\n\t\tsome.comments_flag=False\n\t\tsome.rating_flag=False\n\t\tsome.download_flag=False\n\t\tsome.update_record()\n\tredirect(URL(\'noti\'))\n\t\n\n\ndef search_func():\n\tform = db().select(db.project.ALL, orderby=db.project.project_name)\n\tform1=db().select(db.auth_user.ALL)\n\tform2=db().select(db.files.ALL)\n\tt= request.vars.s\n\treturn dict(t=t,form=form,form1=form1,form2=form2)\n\ndef register():\n\tform = crud.create(db.auth_user)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef viewsub():\n\t\tuser=db(db.subscribe.cur_user==auth.user.id).select()\n\t\treturn dict(user=user)\n@auth.requires_login()\ndef delsub():\n\tdb((db.subscribe.cur_user==auth.user.id) & (db.subscribe.sub_user==request.args(0,cast=int))).delete()\n\tredirect(URL(\'viewsub\'))\n\n\n\n@auth.requires_login()\ndef sub():\n\tuser=db(db.auth_user.id==request.args(0,cast=int)).select().first()\n\tif auth.user.email!=user.email:\n\t\tsad=db((db.subscribe.cur_user==auth.user.id) & (db.subscribe.sub_user==user.id)).select()\n\t\tif len(sad)==0:\n\t\t\ts="You are now subscribed to  "+str(user.email)\n\t\t\tsession.flash=s\n\t\t\tdb.subscribe.insert(cur_user=auth.user.id,sub_user=user.id,is_sub=1)\n\t\telse:\n\t\t\ts="You are already subscribed to  "+str(user.email)\n\t\t\tsession.flash=s\n\telse:\n\t\ts="You cannot subscribe to yourself"\n\t\tsession.flash=s\n\t  \t\n\tredirect(URL(\'allprofile\',args=user.id))\n\treturn dict()\n\t\t\t\n\n@auth.requires_login()\ndef addtokol():\n\tproject=db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\n\tsad=db((db.kolect.cur_user==auth.user.id) & (db.kolect.project_name==project.project_name)).select()\n\tif len(sad)==0:\n\t\ts=str(user.email) + \' is now added to your Collection\' \n\t\tsession.flash=s\n\t\tdb.kolect.insert(cur_user=auth.user.id,project_name=project.project_name,is_sub=1)\n\telse:\n\t\ts=str(user.email) + \' is already in your Collection\' \n\t\tsession.flash=s\n\treturn dict(project=project)\n\n\ndef noti():\n\tseen=db(db.flak.user_id==auth.user.id).select()\n\treturn dict(seen=seen)\n\ndef profile():\n\tredirect(URL(\'allprofile\',args=auth.user.id))\n\ndef editprojects():\n\tform = db(db.auth_user.id==auth.user.id).select()\n\trow=db(db.allowed_users.other_email==auth.user.email).select()\n\tproject=db(db.project.projectadmin_email==auth.user.email).select()\n\treturn dict(row=row,form=form,project=project)\n\n\ndef editprofile():\n\tform = db(db.auth_user.id==auth.user.id).select()\n\trow=db(db.allowed_users.other_email==auth.user.email).select()\n\tdb.auth_user.email.writable=False\n\treturn dict(form1=auth.profile(),row=row,form=form)\n\ndef allprofile():\n\tform = db(db.auth_user.id==request.args(0,cast=int)).select()\n\trow1=db(db.allowed_users.other_email==form[0].email).select()\n\n\tif auth.user:\n\t\trow=db(db.allowed_users.other_email==auth.user.email).select()\n\t\treturn dict(form=form,row=row,row1=row1)\n\telse:\n\t\treturn dict(form=form,row1=row1)\n\ndef byuploads():\n\tform = db().select(db.auth_user.ALL, orderby=~db.auth_user.upload_count)\n\treturn dict(form = form)\n\ndef most_recent():\n\tform = db().select(db.project.ALL, orderby=~db.project.date_added)\n\treturn dict(form=form)\n\t\ndef bycomments():\n\tform = db().select(db.project.ALL, orderby=~db.project.num_comments)\n\treturn dict(form=form)\n\ndef bydownloads():\n\tform = db().select(db.project.ALL, orderby=~db.project.num_downloads)\n\treturn dict(form=form)\n\ndef byrating():\n\tform = db().select(db.project.ALL, orderby=~db.project.avg_rating)\n\treturn dict(form=form)\n\ndef az():\n\tform = db().select(db.project.ALL, orderby=db.project.project_name)\n\treturn dict(form=form)\ndef za():\n\tform1 = db().select(db.project.ALL, orderby=~db.project.project_name)\n\treturn dict(form1=form1)\ndef browse():\n\tform = db().select(db.project.ALL, orderby=db.project.project_name)\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef uploadpage():\n\treturn dict()\n\ndef viewfiles():\n\t\n\tproject=db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tmain=db(db.files.project_id==project.id).select()\n\tver1=db((db.files.project_version==1) & (db.files.project_id==project.id)).select()\n\tver2=db((db.files.project_version==2) & (db.files.project_id==project.id)).select()\n\tver3=db((db.files.project_version==3) & (db.files.project_id==project.id)).select()\n\n\treturn dict(ver1=ver1,ver2=ver2,ver3=ver3,main=main,project=project)\n\ndef delfile3():\n\tfiles=db((db.files.file_name==request.args(0,cast=str)) & (db.files.project_version==1)).select().last()\n\tdb((db.files.file_name==request.args(0,cast=str)) & (db.files.project_version==3)).delete()\n\tsession.flash="File Deleted"\n\tredirect(URL(\'viewfiles\',args=files.project_id))\ndef delfile2():\n\tfiles=db((db.files.file_name==request.args(0,cast=str)) & (db.files.project_version==1)).select().last()\n\tdb((db.files.file_name==request.args(0,cast=str)) & (db.files.project_version==2)).delete()\n\tsession.flash="File Deleted"\n\tredirect(URL(\'viewfiles\',args=files.project_id))\ndef delfile1():\n\tfiles=db((db.files.file_name==request.args(0,cast=str)) & (db.files.project_version==1)).select().last()\n\tdb((db.files.file_name==request.args(0,cast=str)) & (db.files.project_version==1)).delete()\n\tsession.flash="File Deleted"\n\tredirect(URL(\'viewfiles\',args=files.project_id))\n\n\ndef addfiles():\n\t\n\tform=SQLFORM(db.files)\n\tproject=db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tprint \'1q\'\n\tif form.process().accepted:\n\t\tsession.flash=\'Files Added\'\n\t\tmain2=db(db.files.file_name==request.vars.file_name).select().last()\n\t\tmain2.project_id=project.id\n\t\tmain=db((db.files.file_name==request.vars.file_name) & (db.files.project_id==project.id)).select()\n\t\tif len(main)==3:\n\t\t\tv1=db((db.files.file_name==request.vars.file_name) & (db.files.project_id==project.id) &(db.files.project_version==1)).select()\n\t\t\tv2=db((db.files.file_name==request.vars.file_name) & (db.files.project_id==project.id) &(db.files.project_version==2)).select()\n\t\t\tv3=db((db.files.file_name==request.vars.file_name) & (db.files.project_id==project.id) &(db.files.project_version==3)).select()\n\t\t\tv1[0].project_file=v2[0].project_file\n\t\t\tv1[0].file_description=v2[0].file_description\n\t\t\tv2[0].file_description=v3[0].file_description\n\t\t\tv3[0].file_description=request.vars.file_description\n\t\t\tv2[0].project_file=v3[0].project_file\n\t\t\tv3[0].project_file=request.vars.project_file\n\t\t\tv1[0].update_record()\n\t\t\tv2[0].update_record()\n\t\t\tv3[0].update_record()\n\t\telse:\n\t\t\tmain2.project_version=len(main) + 1\n\t\t\tmain2.update_record()\n\t\trow1=db(db.auth_user.email==auth.user.email).select()\n\t\trow1[0].upload_count = row1[0].upload_count + 1\n\t\trow1[0].update_record()\n\t\tdb(db.files.project_version==0).delete()\n\t\tredirect(URL(\'viewfiles\',args=project.id))\n\treturn dict(project=project,form=form)\n\ndef oldproject():\n\trow=db(db.allowed_users.other_email==auth.user.email).select()\n\t\t\n\treturn dict(row=row)\n\n\t\ndef newproject():\n\tform = SQLFORM(db.project)\n\n\tif form.process().accepted:\n\t\tsome=db(db.project.project_name==request.vars.project_name).select()\n\t\trow=db(db.project.project_name==request.vars.project_name).validate_and_update(projectadmin_email=auth.user.email)\n\t\trow1=db(db.auth_user.email==auth.user.email).select()\n\t\trow1[0].upload_count = row1[0].upload_count + 1\n\t\trow1[0].update_record()\n\t\tdb.flak.insert(user_id=auth.user.id,project_id=db().select(db.project.id).last())\n\t\tredirect(URL(\'project_page\',args=some[0].id))\n\treturn dict(form=form)\n\ndef category():\n\tform = db().select(db.project.ALL, orderby=db.project.project_name)\n\treturn dict(form=form)\n\ndef listofprojects():\n\tform =db(db.project.category==request.args(0,cast=str)).select()\n\treturn dict(form=form)\n\ndef most_uploaded():\n\tform = db().select(db.auth_user.ALL)\n\treturn dict(form=form)\n\n\ndef most_rated():\n\tform = db().select(db.project.ALL)\n\treturn dict(form=form)\n\ndef most_commented():\n\tform = db().select(db.project.ALL)\n\treturn dict(form=form)\n\ndef userprojects():\n\tprojects=db(db.project.projectadmin_email==auth.user.email).select()\n\treturn dict(projects=projects)\ndef download_func3():\n\t\n\tmain=db((db.files.project_id==request.args(0,cast=int)) & (db.files.project_version==3)).select()\n\t\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tproject.num_downloads=project.num_downloads + 1\n\tproject.update_record()\n\tcan=db(db.flak.project_id==project.id).select()\n\tif len(can)!=0:\n\t\n\t\tcan[0].download_flag=True\n\t\tcan[0].all_flag=True\n\t\tcan[0].update_record()\n\n\tredirect(URL(\'download\',args=main[0].project_file))\ndef download_func2():\n\t\n\tmain=db((db.files.project_id==request.args(0,cast=int)) & (db.files.project_version==2)).select()\n\t\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tproject.num_downloads=project.num_downloads + 1\n\tproject.update_record()\n\tcan=db(db.flak.project_id==project.id).select()\n\tif len(can)!=0:\n\t\tcan[0].download_flag=True\n\t\tcan[0].all_flag=True\n\t\tcan[0].update_record()\n\n\tredirect(URL(\'download\',args=main[0].project_file))\ndef download_func1():\n\t\n\tmain=db((db.files.project_id==request.args(0,cast=int)) & (db.files.project_version==1)).select()\n\t\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tproject.num_downloads=project.num_downloads + 1\n\tproject.update_record()\n\tcan=db(db.flak.project_id==project.id).select()\n\tif len(can)!=0:\n\t\tcan[0].download_flag=True\n\t\tcan[0].all_flag=True\n\t\tcan[0].update_record()\n\n\tredirect(URL(\'download\',args=main[0].project_file))\n\n\ndef mostdownload():\n\tform=db().select(db.project.ALL)\n\treturn dict(form=form)\n"""\ndef clear():\n\tdb.project.truncate()\n\tdb.auth_user.truncate()\n\tdb.comments.truncate()\n\treturn dict()\n"""\n\n@auth.requires_login()\ndef delproject():\n\t\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\n\tdb(db.allowed_users.project_name==project.project_name).delete()\n\tdb(request.args(0,cast=int)==db.project.id).delete()\n\tsession.flash = \'Project deleted\'\n\tredirect(URL(\'editprojects\'))\n\n\n@auth.requires_login()\ndef editproject():\n\tproject = db.project(request.args(0,cast=int))\n\t\n\tform = SQLFORM.factory(\n\t\t\tField(\'description\',type=\'text\',default=project.description),\n\t\t\tField(\'projectadmin_email\',writable=False,readable=False,default=auth.user.email),\n\t\t\tField(\'project_pic\',type=\'upload\',default=\'\'),\n\t\t\tField(\'type_of_project\',requires=IS_IN_SET([\'Course\',\'Thesis\',\'Research Paper\',\'MSIT\',\'Other\']),default=project.type_of_project),\n\t\t\tField(\'category\',requires=IS_IN_SET([\'Audio & Video\',\'Business & Enterprise\',\'Communications\',\'Development\',\'Home & Education\',\'Games\',\'Graphics\',\'Science & Engineering\',\'Websites\',\'Others\']),default=project.category),\n\t\t\tField(\'project_admin_year\',requires=IS_IN_SET([\'BTECH\',\'MS\',\'MTECH\',\'PHD\']),default=project.project_admin_year)\n\t\t\n\t\t\t)\n\tif form.process().accepted:\n\t\tsession.flash=\'Project Details Updated\'\n\t\tdb(db.project.id==request.args(0,cast=int)).update(project_pic=form.vars.project_pic,description=form.vars.description,type_of_project=form.vars.type_of_project,category=form.vars.category,project_admin_year=form.vars.project_admin_year)\n\t\tredirect(URL(\'editproject\',args=project.id))\n\treturn dict(form=form,project=project)\n\ndef project_page():\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tdb.comments.project_id.default = project.id\n\tform = SQLFORM(db.comments)\n\tcomments = db(db.comments.project_id==project.id).select()\n\treturn dict(project=project, comments=comments, form=form)\n\n@auth.requires_login()\ndef commentandrate():\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tdb.comments.project_id.default = project.id\n\tform = SQLFORM(db.comments)\n\tform1= SQLFORM.factory(\n\t\tField(\'rating\',type=\'integer\',requires=IS_IN_SET([1,2,3,4,5])))\n\t\n\tif form.process().accepted:\n\t\trow=db(db.comments.comment_c==request.vars.comment_c).select().last()\n\t\trow.commenter_c=auth.user.email\n\t\trow.update_record()\n\t\t\n\t\tcan=db(db.flak.project_id==project.id).select()\n\t\tif len(can)!=0:\n\t\t\tcan[0].comments_flag=True\n\t\t\tcan[0].all_flag=True\n\t\t\tcan[0].update_record()\n\t\tresponse.flash = \'your comment is posted\'\n\t\n\tif form1.process().accepted:\n\t\tresponse.flash = \'your rating has been added\'\n\t\tproject.num_rating = project.num_rating + 1\n\t\tproject.total_rating = int(project.total_rating) + int(request.vars.rating)\n\t\tcan=db(db.flak.project_id==project.id).select()\n\t\tif len(can)!=0:\n\t\t\tcan[0].rating_flag=True\n\t\t\tcan[0].all_flag=True\n\t\t\tcan[0].update_record()\n\t\tproject.update_record()\n\t\n\tcomments = db(db.comments.project_id==project.id).select()\n\t\n\treturn dict(project=project, comments=comments, form=form,form1=form1)\n\ndef collo_error():\n\treturn dict()\n"""\ndef delete_collo():\n\tprint request.args(1)\n\treturn  dict()\n"""\ndef confirm_delcollo():\n\t\n\tuser = db.allowed_users(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\tproject=db(db.allowed_users.project_name==user.project_name).select()\n\tdb(request.args(0,cast=int)==db.allowed_users.id).delete()\n\tredirect(URL(\'project_page\',args=project[0].id))\n\n\n\ndef delcollo():\n\n\tproject = db.project(request.args(0,cast=int))\n\trow=db(db.allowed_users.project_name==project.project_name).select()\n\n\tif auth.user:\n\t\tif auth.user.email==project.projectadmin_email:\n\t\t\treturn dict(row=row,project=project)\n\telse:\n\t\tredirect(URL(\'collo_error\',args=project.id))\n\n\n@auth.requires_login()\ndef addcollo():\n\t\n\tproject = db.project(request.args(0,cast=int)) or redirect(URL(\'index\'))\n\t\n#\trow=db(project.project_name==db.allowed_users.project_name).select()\n\n\tform1 = SQLFORM.factory(\n\t\tField(\'add_collaborator\',type=\'string\',requires=IS_EMAIL())\n\t\t)\n \n\trow1=db(db.allowed_users.project_name==project.project_name).select()\n\t\n\tif form1.process().accepted:\n\t\tdb.allowed_users.insert(other_email=request.vars.add_collaborator)\n\t\trow=db(db.allowed_users.other_email==request.vars.add_collaborator).select().last()\n\t\trow.project_name=project.project_name\n\t\trow.projectadmin_email=auth.user.email\n\t\trow.update_record()\n\t\tredirect(URL(\'project_page\',args=project.id))\n\t\t\n\n\tif auth.user.email==project.projectadmin_email:\n\t\t\treturn dict(form1=form1,project=project,row1=row1)\n\telse:\n\t\t\tredirect(URL(\'collo_error\',args=project.id))\n\t\n\n\n\n\n\t\n"""def login():\n\tform=SQLFORM.factory(\n\t\t\tField(\'user\',type=\'string\',requires=IS_NOT_EMPTY()),\n\t\t\tField(\'password\',type=\'password\'),\n\t\t\tField(\'dateofbirth\',type=\'date\')\n\t)\n\tif form.process().accepted:\n\t\trow=db(db.register.Username==request.vars.user).select()\n\t\tif request.vars.password==row[0][\'Password\']:\n\t\t\tredirect(URL(\'upload\'))\n\t\telse:\n\t\t\tresponse.flash=\'Invalid username or password\'\n\telse:\n\t \tresponse.flash=\'Error\'\n\n\treturn dict(form=form)\n"""\n\nresponse._vars=response._caller(addtokol)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/kira/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/kira/web2py/applications/projectlibrary/controllers/default.py", line 523, in <module>\n  File "/home/kira/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/kira/web2py/gluon/tools.py", line 2942, in f\n    return action(*a, **b)\n  File "/home/kira/web2py/applications/projectlibrary/controllers/default.py", line 139, in addtokol\n    sad=db((db.kolect.cur_user==auth.user.id) & (db.kolect.project_name==project.project_name)).select()\n  File "/home/kira/web2py/gluon/dal.py", line 9769, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/kira/web2py/gluon/dal.py", line 2222, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/kira/web2py/gluon/dal.py", line 1667, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/kira/web2py/gluon/dal.py", line 1577, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/kira/web2py/gluon/dal.py", line 1356, in expand\n    return op(first, second, **optional_args)\n  File "/home/kira/web2py/gluon/dal.py", line 1224, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/kira/web2py/gluon/dal.py", line 1356, in expand\n    return op(first, second, **optional_args)\n  File "/home/kira/web2py/gluon/dal.py", line 1281, in EQ\n    self.expand(second, first.type))\n  File "/home/kira/web2py/gluon/dal.py", line 1366, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/kira/web2py/gluon/dal.py", line 1804, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'check flak\'\n'
p11
s.